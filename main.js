(()=>{"use strict";var n,e,t,r,a,o={426:(n,e,t)=>{t.d(e,{Z:()=>f});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),c=t(667),s=t.n(c),A=new URL(t(752),t.b),p=new URL(t(929),t.b),l=i()(a()),u=s()(A),d=s()(p);l.push([n.id,"@font-face {\r\n    font-family: 'sans-light';\r\n    src: url("+u+");\r\n    font-style: normal;\r\n    font-weight: 100px;\r\n}\r\n\r\nhtml {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    font-family: 'sans-light';\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 32px;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#display {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 32px;\r\n}\r\n\r\n\r\n#mainInfo {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 8px;\r\n    padding: 64px;\r\n    background-image: url("+d+");\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n#mainInfo img {\r\n    height: 5vh;\r\n    width: auto;\r\n}\r\n\r\n#locationDisplay {\r\n    font-size: 48px;\r\n}\r\n\r\n#tempDisplay {\r\n    display: flex;\r\n    font-size: 96px;\r\n}\r\n\r\n\r\n#localTime {\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-content: center;\r\n    font-size: 48px;\r\n}\r\n\r\n#weatherInfo {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 32px;\r\n}\r\n\r\n#left-container, #right-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    font-size: 24px;\r\n}\r\n\r\n#right-container {\r\n    align-items: center;\r\n}\r\n\r\n#windContainer, #humidityContainer {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n\r\n}\r\n\r\n/* for input */\r\n#inputFields {\r\n    border: 1px solid rgb(239, 239, 239);\r\n}\r\ninput {\r\n    padding: 8px;\r\n    border: 0;\r\n}\r\n#location, #submit {\r\n    padding: 16px;\r\n    font-size: 16px;\r\n    border: 0;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,4CAAwD;IACxD,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,UAAU;IACV,SAAS;IACT,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;IACvB,QAAQ;IACR,aAAa;IACb,yDAAmD;IACnD,sBAAsB;IACtB,4BAA4B;AAChC;;;AAGA;IACI,WAAW;IACX,WAAW;AACf;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;;AAGA;IACI,aAAa;IACb,uBAAuB;IACvB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;;AAEZ;;AAEA,cAAc;AACd;IACI,oCAAoC;AACxC;AACA;IACI,YAAY;IACZ,SAAS;AACb;AACA;IACI,aAAa;IACb,eAAe;IACf,SAAS;AACb",sourcesContent:["@font-face {\r\n    font-family: 'sans-light';\r\n    src: url('Open_Sans/static/OpenSans/OpenSans-Light.ttf');\r\n    font-style: normal;\r\n    font-weight: 100px;\r\n}\r\n\r\nhtml {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    font-family: 'sans-light';\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 32px;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#display {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 32px;\r\n}\r\n\r\n\r\n#mainInfo {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 8px;\r\n    padding: 64px;\r\n    background-image: url('./img/background-image.png');\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n\r\n#mainInfo img {\r\n    height: 5vh;\r\n    width: auto;\r\n}\r\n\r\n#locationDisplay {\r\n    font-size: 48px;\r\n}\r\n\r\n#tempDisplay {\r\n    display: flex;\r\n    font-size: 96px;\r\n}\r\n\r\n\r\n#localTime {\r\n    display: flex;\r\n    justify-content: center;\r\n    justify-content: center;\r\n    font-size: 48px;\r\n}\r\n\r\n#weatherInfo {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    gap: 32px;\r\n}\r\n\r\n#left-container, #right-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    font-size: 24px;\r\n}\r\n\r\n#right-container {\r\n    align-items: center;\r\n}\r\n\r\n#windContainer, #humidityContainer {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n\r\n}\r\n\r\n/* for input */\r\n#inputFields {\r\n    border: 1px solid rgb(239, 239, 239);\r\n}\r\ninput {\r\n    padding: 8px;\r\n    border: 0;\r\n}\r\n#location, #submit {\r\n    padding: 16px;\r\n    font-size: 16px;\r\n    border: 0;\r\n}\r\n\r\n"],sourceRoot:""}]);const f=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var A=0;A<n.length;A++){var p=[].concat(n[A]);r&&i[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),e.push(p))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},654:(n,e,t)=>{var r=t(379),a=t.n(r),o=t(795),i=t.n(o),c=t(569),s=t.n(c),A=t(565),p=t.n(A),l=t(216),u=t.n(l),d=t(589),f=t.n(d),m=t(426),g={};g.styleTagTransform=f(),g.setAttributes=p(),g.insert=s().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),a()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],c=0;c<n.length;c++){var s=n[c],A=r.base?s[0]+r.base:s[0],p=o[A]||0,l="".concat(A," ").concat(p);o[A]=p+1;var u=t(l),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(d);else{var f=a(d,r);r.byIndex=c,e.splice(c,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var c=t(o[i]);e[c].references--}for(var s=r(n,a),A=0;A<o.length;A++){var p=t(o[A]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},105:(n,e,t)=>{function r(n){let e=new Date,t=e.getUTCSeconds()+60*e.getUTCMinutes()+3600*e.getUTCHours();return new Date(1e3*(t+n)).toISOString().slice(11,16)}t.d(e,{Z:()=>r})},138:(n,e,t)=>{t.a(n,(async n=>{t(654);var e=t(497),r=t(626),a=t(105);const o=await(0,e.Z)("vancouver"),i=o.name,c=o.sys.country,s=o.main.temp,A=o.weather[0].main,p=o.weather[0].description,l=o.main.humidity,u=o.wind.speed;(0,r.Z)(i,c,s,A,p,u,l,(0,a.Z)(o.timezone));const d=document.getElementById("inputFields");d.addEventListener("submit",(async n=>{n.preventDefault();let t=d.location.value;const o=await(0,e.Z)(t).catch((()=>"error"));"city not found"!==o.message&&"Nothing to geocode"!==o.message&&void 0!==o&&(0,r.Z)(o.name,o.sys.country,o.main.temp,o.weather[0].main,o.weather[0].description,o.wind.speed,o.main.humidity,(0,a.Z)(o.timezone))})),n()}),1)},626:(n,e,t)=>{t.d(e,{Z:()=>o});var r=t(850),a=t(821);function o(n,e,t,o,i,c,s,A){const p=document.getElementById("locationDisplay"),l=document.getElementById("tempDisplay"),u=document.getElementById("weatherMainDisplay"),d=document.getElementById("weatherDescDisplay"),f=document.getElementById("windSpeedDisplay"),m=document.getElementById("humidityDisplay"),g=document.getElementById("localTimeDisplay"),h=document.getElementById("dropLogo");h.src=r,h.style.cssText="object-fit: contain; height: 2vh; width: auto";const y=document.getElementById("speedLogo");y.src=a,y.style.cssText="object-fit: contain; height: 2vh; width: auto",p.textContent=`${n}, ${e}`,l.textContent=`${Math.round(t)} °C`,u.textContent=o;let C=i.split(" ").map((n=>n[0].toUpperCase()+n.slice(1))).join(" ");d.textContent=C,f.textContent=`Wind Speed: ${c.toFixed(1)} km/h`,m.textContent=`Humidity: ${s} %`,g.textContent=`${A}`}},497:(n,e,t)=>{t.d(e,{Z:()=>r});const r=async function(n){try{let e=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${n}&units=metric&appid=eea6270f8d3b0007556349798ce5e18d`,{mode:"cors"});return await e.json()}catch(n){console.log(n)}}},752:(n,e,t)=>{n.exports=t.p+"846a12caf01a940847a7.ttf"},929:(n,e,t)=>{n.exports=t.p+"083d430f115b5994369d.png"},850:(n,e,t)=>{n.exports=t.p+"b8e2a694ef46c6fbf4f8.png"},821:(n,e,t)=>{n.exports=t.p+"fe99eeafc3fc969cddba.png"}},i={};function c(n){var e=i[n];if(void 0!==e)return e.exports;var t=i[n]={id:n,exports:{}};return o[n](t,t.exports,c),t.exports}c.m=o,n="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t=n=>{n&&(n.forEach((n=>n.r--)),n.forEach((n=>n.r--?n.r++:n())))},r=n=>!--n.r&&n(),a=(n,e)=>n?n.push(e):r(e),c.a=(o,i,c)=>{var s,A,p,l=c&&[],u=o.exports,d=!0,f=!1,m=(e,t,r)=>{f||(f=!0,t.r+=e.length,e.map(((e,a)=>e[n](t,r))),f=!1)},g=new Promise(((n,e)=>{p=e,A=()=>(n(u),t(l),l=0)}));g[e]=u,g[n]=(n,e)=>{if(d)return r(n);s&&m(s,n,e),a(l,n),g.catch(e)},o.exports=g,i((o=>{if(!o)return A();var i,c;s=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[n])return o;if(o.then){var i=[];o.then((n=>{c[e]=n,t(i),i=0}));var c={};return c[n]=(n,e)=>(a(i,n),o.catch(e)),c}}var s={};return s[n]=n=>r(n),s[e]=o,s})))(o);var p=new Promise(((n,t)=>{(i=()=>n(c=s.map((n=>n[e])))).r=0,m(s,i,t)}));return i.r?p:c})).then(A,p),d=!1},c.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return c.d(e,{a:e}),e},c.d=(n,e)=>{for(var t in e)c.o(e,t)&&!c.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),c.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;c.g.importScripts&&(n=c.g.location+"");var e=c.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=n})(),c.b=document.baseURI||self.location.href,c(138)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,